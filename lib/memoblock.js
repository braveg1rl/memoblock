// Generated by CoffeeScript 1.6.2
(function() {
  var collect, containsPromises, isPromise, isPropertyOf, makePromise, memoblock, _ref;

  _ref = require("faithful"), isPromise = _ref.isPromise, collect = _ref.collect, makePromise = _ref.makePromise;

  module.exports = memoblock = {
    "do": function(functions) {
      return this.doWith({}, functions);
    },
    doWith: function(memo, functions) {
      var i;

      i = -1;
      return makePromise(function(cb) {
        var iterate;

        iterate = function(memo) {
          var error, r;

          i++;
          if (i >= functions.length) {
            return cb(null, memo);
          }
          try {
            r = functions[i].call(memo, memo);
          } catch (_error) {
            error = _error;
            return cb(error);
          }
          if (containsPromises(memo)) {
            if ((isPromise(r)) && !(isPropertyOf(r, memo))) {
              return r.then(function() {
                return collect(memo);
              }).then((function(m) {
                return iterate(m);
              }), function(err) {
                return cb(err);
              });
            } else {
              return collect(memo).then((function(m) {
                return iterate(m);
              }), function(err) {
                return cb(err);
              });
            }
          } else {
            if (isPromise(r)) {
              return r.then((function() {
                return iterate(memo);
              }), function(err) {
                return cb(err);
              });
            } else {
              return iterate(memo);
            }
          }
        };
        return iterate(memo);
      });
    }
  };

  containsPromises = function(obj) {
    var name, value;

    for (name in obj) {
      value = obj[name];
      if (isPromise(value)) {
        return true;
      }
    }
    return false;
  };

  isPropertyOf = function(subject, obj) {
    var name, value;

    for (name in obj) {
      value = obj[name];
      if (value === subject) {
        return true;
      }
    }
    return false;
  };

}).call(this);

/*
//@ sourceMappingURL=memoblock.map
*/
